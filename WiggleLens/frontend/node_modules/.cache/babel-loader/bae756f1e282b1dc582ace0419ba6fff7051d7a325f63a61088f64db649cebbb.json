{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leonidas\\\\Desktop\\\\Coding\\\\DispoStudio\\\\WiggleLens\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [fullImagePreview, setFullImagePreview] = useState(null);\n  const [imagePreviews, setImagePreviews] = useState([]);\n  const [imageSize, setImageSize] = useState({\n    width: 0,\n    height: 0\n  });\n  const [focalPoints, setFocalPoints] = useState([null, null, null]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isSplit, setIsSplit] = useState(false);\n  const [loadedImage, setLoadedImage] = useState(null);\n  const [splitLoading, setSplitLoading] = useState(false);\n  const [autoDetectLoading, setAutoDetectLoading] = useState(false);\n  const [lenses, setLenses] = useState([{\n    visible: false,\n    x: 0,\n    y: 0,\n    backgroundPosX: 50,\n    backgroundPosY: 50\n  }, {\n    visible: false,\n    x: 0,\n    y: 0,\n    backgroundPosX: 50,\n    backgroundPosY: 50\n  }, {\n    visible: false,\n    x: 0,\n    y: 0,\n    backgroundPosX: 50,\n    backgroundPosY: 50\n  }]);\n  const handleImageUpload = async e => {\n    const file = e.target.files[0];\n\n    // Create temporary image to check dimensions\n    const img = new Image();\n    img.onload = () => {\n      // Check for exact 6000x4000 dimensions\n      if (img.width !== 6000 || img.height !== 4000) {\n        setError('Please upload an image that is exactly 6000x4000 pixels');\n        // Reset file input\n        e.target.value = '';\n        return;\n      }\n\n      // If dimensions are correct, proceed with upload\n      setImage(file);\n      setFocalPoints([null, null, null]);\n      setIsSplit(false);\n      setError(null); // Clear any previous errors\n\n      setImageSize({\n        width: img.width,\n        height: img.height\n      });\n      setFullImagePreview(img.src);\n      setLoadedImage(img);\n    };\n    img.onerror = () => {\n      setError('Failed to load image');\n      e.target.value = '';\n    };\n    img.src = URL.createObjectURL(file);\n  };\n  const handleSplitImage = async () => {\n    // Reset focal points every time user re-splits the image.\n    setFocalPoints([null, null, null]);\n    setSplitLoading(true);\n    try {\n      const img = loadedImage;\n      const sectionWidth = Math.floor(img.width / 3);\n\n      // Create sections in parallel\n      const sectionPromises = [0, 1, 2].map(async i => {\n        const canvas = new OffscreenCanvas(sectionWidth, img.height);\n        const ctx = canvas.getContext('2d');\n\n        // Draw section\n        ctx.drawImage(img, i * sectionWidth, 0, sectionWidth, img.height, 0, 0, sectionWidth, img.height);\n\n        // Convert to blob and then to data URL\n        const blob = await canvas.convertToBlob({\n          type: 'image/jpeg',\n          quality: 0.8\n        });\n        return URL.createObjectURL(blob);\n      });\n      const previews = await Promise.all(sectionPromises);\n      setImagePreviews(previews);\n      setIsSplit(true);\n    } catch (err) {\n      console.error('Error splitting image:', err);\n      setError('Failed to split image');\n    } finally {\n      setSplitLoading(false);\n    }\n  };\n  const handleLensEnter = sectionIndex => {\n    setLenses(prev => {\n      const updated = [...prev];\n      updated[sectionIndex].visible = true;\n      return updated;\n    });\n  };\n  const handleLensLeave = sectionIndex => {\n    setLenses(prev => {\n      const updated = [...prev];\n      updated[sectionIndex].visible = false;\n      return updated;\n    });\n  };\n  const handleLensMove = (sectionIndex, e) => {\n    const containerRect = e.currentTarget.getBoundingClientRect();\n    const imageEl = e.currentTarget.querySelector('.section-image');\n    if (!imageEl) return;\n\n    // Mouse position in container coords\n    let localX = e.clientX - containerRect.left;\n    let localY = e.clientY - containerRect.top;\n\n    // The rendered width/height of the <img> element\n    const renderedWidth = imageEl.width;\n    const renderedHeight = imageEl.height;\n\n    // Natural aspect vs. container aspect\n    const imageAspect = imageEl.naturalWidth / imageEl.naturalHeight;\n    const containerAspect = renderedWidth / renderedHeight;\n\n    // Handle letterboxing if the image is contained\n    if (imageAspect > containerAspect) {\n      // Image is wider than container, so vertical letterboxing\n      const actualHeight = renderedWidth / imageAspect;\n      const verticalPadding = (renderedHeight - actualHeight) / 2;\n      localY -= verticalPadding; // subtract padding\n      // clamp\n      localY = Math.max(0, Math.min(localY, actualHeight));\n    } else {\n      // Image is taller than container, so horizontal letterboxing\n      const actualWidth = renderedHeight * imageAspect;\n      const horizontalPadding = (renderedWidth - actualWidth) / 2;\n      localX -= horizontalPadding;\n      localX = Math.max(0, Math.min(localX, actualWidth));\n    }\n\n    // Convert localX/localY to fraction of displayed image\n    const fractionX = localX / Math.max(1, renderedWidth);\n    const fractionY = localY / Math.max(1, renderedHeight);\n\n    // For a symmetrical 2x zoom (200% × 200%):\n    const bgPosX = fractionX * 400;\n    const bgPosY = fractionY * 400;\n    setLenses(prev => {\n      const updated = [...prev];\n      updated[sectionIndex] = {\n        ...updated[sectionIndex],\n        visible: true,\n        x: e.clientX - containerRect.left,\n        y: e.clientY - containerRect.top,\n        backgroundPosX: bgPosX,\n        backgroundPosY: bgPosY\n      };\n      return updated;\n    });\n  };\n  const handleSectionClick = (sectionIndex, e) => {\n    const rect = e.target.getBoundingClientRect();\n    const image = e.target;\n\n    // Get the actual rendered size of the image\n    const renderedWidth = image.width;\n    const renderedHeight = image.height;\n\n    // Calculate the scaling factor between rendered size and natural size\n    const scaleX = image.naturalWidth / renderedWidth;\n    const scaleY = image.naturalHeight / renderedHeight;\n\n    // Get click position relative to the rendered image\n    // Account for potential padding due to object-fit: contain\n    const imageAspect = image.naturalWidth / image.naturalHeight;\n    const containerAspect = renderedWidth / renderedHeight;\n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n\n    // Adjust coordinates if image is letterboxed due to object-fit: contain\n    if (imageAspect > containerAspect) {\n      // Image is wider than container - has vertical padding\n      const actualHeight = renderedWidth / imageAspect;\n      const padding = (renderedHeight - actualHeight) / 2;\n      y = y - padding;\n      // Clamp y to actual image bounds\n      y = Math.max(0, Math.min(y, actualHeight));\n    } else {\n      // Image is taller than container - has horizontal padding\n      const actualWidth = renderedHeight * imageAspect;\n      const padding = (renderedWidth - actualWidth) / 2;\n      x = x - padding;\n      // Clamp x to actual image bounds\n      x = Math.max(0, Math.min(x, actualWidth));\n    }\n\n    // Scale to original image coordinates\n    const originalX = Math.round(x * scaleX);\n    const originalY = Math.round(y * scaleY);\n\n    // Add the section offset\n    const sectionWidth = imageSize.width / 3;\n    const adjustedX = originalX + sectionIndex * sectionWidth;\n\n    // Clamp values to ensure they stay within the section bounds\n    const finalX = Math.max(sectionIndex * sectionWidth, Math.min(adjustedX, (sectionIndex + 1) * sectionWidth - 1));\n    const finalY = Math.max(0, Math.min(originalY, imageSize.height - 1));\n    const newFocalPoints = [...focalPoints];\n    newFocalPoints[sectionIndex] = {\n      x: finalX,\n      y: finalY\n    };\n    setFocalPoints(newFocalPoints);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // No more \"Confirm Focal Point\" check; we just create the wiggle if all points are set\n    if (focalPoints.some(fp => fp === null)) {\n      setError('Please set a focal point on each section before creating wiggle.');\n      return;\n    }\n    setError(null);\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', image);\n      formData.append('focalPoints', JSON.stringify(focalPoints));\n      const response = await fetch('http://localhost:5000/api/process_image', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to process image');\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'wiggle.mp4';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleBack = () => {\n    // Instead of stepping \"back\" through sections, return to full-image page\n    if (isSplit) {\n      setIsSplit(false);\n    } else if (image) {\n      // If we haven't split yet, go back to upload\n      setImage(null);\n      setFullImagePreview(null);\n      setImagePreviews([]);\n      setFocalPoints([null, null, null]);\n    }\n  };\n  function handleRotate90() {\n    if (!loadedImage) return;\n\n    // Create an offscreen canvas to draw the rotated image\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // The rotated image dimensions swap: width -> height, height -> width\n    canvas.width = loadedImage.height;\n    canvas.height = loadedImage.width;\n\n    // Move the origin to the center of the canvas, rotate 90 deg clockwise, then draw\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(Math.PI / 2);\n    // Draw the image so its center is at the canvas origin\n    ctx.drawImage(loadedImage, -loadedImage.width / 2, -loadedImage.height / 2);\n\n    // Convert canvas back to data URL and load it into an <img> so we can update loadedImage\n    const rotatedUrl = canvas.toDataURL('image/jpeg');\n    const rotatedImg = new Image();\n    rotatedImg.onload = () => {\n      // Update states for new (rotated) image\n      setLoadedImage(rotatedImg);\n      setFullImagePreview(rotatedImg.src);\n      // Also update imageSize so that focal points compute correctly\n      setImageSize({\n        width: rotatedImg.width,\n        height: rotatedImg.height\n      });\n    };\n    rotatedImg.src = rotatedUrl;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [(image || isSplit) && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-arrow\",\n      onClick: handleBack,\n      title: \"Go back\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"WiggleLens Image Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [!image && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"upload-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageUpload,\n            required: true,\n            className: \"upload-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this), \"Upload Image (6000x4000)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), fullImagePreview && !isSplit && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-image-container\",\n        style: {\n          display: 'flex',\n          gap: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: fullImagePreview,\n          alt: \"Full uploaded image\",\n          className: \"full-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleRotate90,\n            style: {\n              marginBottom: '10px',\n              padding: '12px 30px',\n              backgroundColor: '#f39c12',\n              color: 'white',\n              border: 'none',\n              borderRadius: '8px',\n              fontSize: '1.1em',\n              cursor: 'pointer',\n              transition: 'background-color 0.3s'\n            },\n            children: \"Rotate 90 Degrees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleSplitImage,\n            className: \"split-button\",\n            disabled: splitLoading,\n            children: splitLoading ? 'Splitting...' : 'Split Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this), isSplit && imagePreviews.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sections-container\",\n          children: imagePreviews.map((preview, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"section-title\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-image-container\",\n              onMouseEnter: () => handleLensEnter(index),\n              onMouseLeave: () => handleLensLeave(index),\n              onMouseMove: e => handleLensMove(index, e),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: preview,\n                alt: `Section ${index + 1}`,\n                onClick: e => handleSectionClick(index, e),\n                className: \"section-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 21\n              }, this), focalPoints[index] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"focal-point\",\n                style: {\n                  left: `${focalPoints[index].x % (imageSize.width / 3) / (imageSize.width / 3) * 100}%`,\n                  top: `${focalPoints[index].y / imageSize.height * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 23\n              }, this), lenses[index].visible && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"magnifier-lens\",\n                style: {\n                  left: lenses[index].x,\n                  top: lenses[index].y,\n                  backgroundImage: `url(${preview})`,\n                  backgroundPosition: `${lenses[index].backgroundPosX}% ${lenses[index].backgroundPosY}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this), focalPoints[index] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coordinates-text\",\n              children: `Focal point: (${Math.round(focalPoints[index].x - index * (imageSize.width / 3))}, ${Math.round(focalPoints[index].y)})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"previews-title\",\n          children: \"Click on each section to set focal points:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), isSplit && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\"\n        // Only enable if all 3 focal points are set\n        ,\n        disabled: loading || focalPoints.some(fp => fp === null),\n        className: \"submit-button\",\n        children: loading ? 'Processing...' : 'Create Wiggle'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Bn134Rm7HKi6dvxahstkMmSEvGA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","image","setImage","fullImagePreview","setFullImagePreview","imagePreviews","setImagePreviews","imageSize","setImageSize","width","height","focalPoints","setFocalPoints","error","setError","loading","setLoading","isSplit","setIsSplit","loadedImage","setLoadedImage","splitLoading","setSplitLoading","autoDetectLoading","setAutoDetectLoading","lenses","setLenses","visible","x","y","backgroundPosX","backgroundPosY","handleImageUpload","e","file","target","files","img","Image","onload","value","src","onerror","URL","createObjectURL","handleSplitImage","sectionWidth","Math","floor","sectionPromises","map","i","canvas","OffscreenCanvas","ctx","getContext","drawImage","blob","convertToBlob","type","quality","previews","Promise","all","err","console","handleLensEnter","sectionIndex","prev","updated","handleLensLeave","handleLensMove","containerRect","currentTarget","getBoundingClientRect","imageEl","querySelector","localX","clientX","left","localY","clientY","top","renderedWidth","renderedHeight","imageAspect","naturalWidth","naturalHeight","containerAspect","actualHeight","verticalPadding","max","min","actualWidth","horizontalPadding","fractionX","fractionY","bgPosX","bgPosY","handleSectionClick","rect","scaleX","scaleY","padding","originalX","round","originalY","adjustedX","finalX","finalY","newFocalPoints","handleSubmit","preventDefault","some","fp","formData","FormData","append","JSON","stringify","response","fetch","method","body","ok","errorData","json","Error","url","window","a","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","message","handleBack","handleRotate90","translate","rotate","PI","rotatedUrl","toDataURL","rotatedImg","className","children","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","onChange","required","style","display","gap","alt","flexDirection","justifyContent","marginBottom","backgroundColor","color","border","borderRadius","fontSize","cursor","transition","disabled","length","preview","index","onMouseEnter","onMouseLeave","onMouseMove","backgroundImage","backgroundPosition","_c","$RefreshReg$"],"sources":["C:/Users/Leonidas/Desktop/Coding/DispoStudio/WiggleLens/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [image, setImage] = useState(null);\n  const [fullImagePreview, setFullImagePreview] = useState(null);\n  const [imagePreviews, setImagePreviews] = useState([]);\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });\n  const [focalPoints, setFocalPoints] = useState([null, null, null]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isSplit, setIsSplit] = useState(false);\n  const [loadedImage, setLoadedImage] = useState(null);\n  const [splitLoading, setSplitLoading] = useState(false);\n  const [autoDetectLoading, setAutoDetectLoading] = useState(false);\n  const [lenses, setLenses] = useState([\n    {\n      visible: false,\n      x: 0,\n      y: 0,\n      backgroundPosX: 50,\n      backgroundPosY: 50,\n    },\n    {\n      visible: false,\n      x: 0,\n      y: 0,\n      backgroundPosX: 50,\n      backgroundPosY: 50,\n    },\n    {\n      visible: false,\n      x: 0,\n      y: 0,\n      backgroundPosX: 50,\n      backgroundPosY: 50,\n    },\n  ]);\n\n  const handleImageUpload = async (e) => {\n    const file = e.target.files[0];\n    \n    // Create temporary image to check dimensions\n    const img = new Image();\n    img.onload = () => {\n      // Check for exact 6000x4000 dimensions\n      if (img.width !== 6000 || img.height !== 4000) {\n        setError('Please upload an image that is exactly 6000x4000 pixels');\n        // Reset file input\n        e.target.value = '';\n        return;\n      }\n\n      // If dimensions are correct, proceed with upload\n      setImage(file);\n      setFocalPoints([null, null, null]);\n      setIsSplit(false);\n      setError(null);  // Clear any previous errors\n      \n      setImageSize({ width: img.width, height: img.height });\n      setFullImagePreview(img.src);\n      setLoadedImage(img);\n    };\n\n    img.onerror = () => {\n      setError('Failed to load image');\n      e.target.value = '';\n    };\n\n    img.src = URL.createObjectURL(file);\n  };\n\n  const handleSplitImage = async () => {\n    // Reset focal points every time user re-splits the image.\n    setFocalPoints([null, null, null]);\n\n    setSplitLoading(true);\n    try {\n      const img = loadedImage;\n      const sectionWidth = Math.floor(img.width / 3);\n      \n      // Create sections in parallel\n      const sectionPromises = [0, 1, 2].map(async (i) => {\n        const canvas = new OffscreenCanvas(sectionWidth, img.height);\n        const ctx = canvas.getContext('2d');\n        \n        // Draw section\n        ctx.drawImage(\n          img,\n          i * sectionWidth, 0, sectionWidth, img.height,\n          0, 0, sectionWidth, img.height\n        );\n        \n        // Convert to blob and then to data URL\n        const blob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.8 });\n        return URL.createObjectURL(blob);\n      });\n      \n      const previews = await Promise.all(sectionPromises);\n      setImagePreviews(previews);\n      setIsSplit(true);\n    } catch (err) {\n      console.error('Error splitting image:', err);\n      setError('Failed to split image');\n    } finally {\n      setSplitLoading(false);\n    }\n  };\n\n  const handleLensEnter = (sectionIndex) => {\n    setLenses((prev) => {\n      const updated = [...prev];\n      updated[sectionIndex].visible = true;\n      return updated;\n    });\n  };\n\n  const handleLensLeave = (sectionIndex) => {\n    setLenses((prev) => {\n      const updated = [...prev];\n      updated[sectionIndex].visible = false;\n      return updated;\n    });\n  };\n\n  const handleLensMove = (sectionIndex, e) => {\n    const containerRect = e.currentTarget.getBoundingClientRect();\n    const imageEl = e.currentTarget.querySelector('.section-image');\n    if (!imageEl) return;\n\n    // Mouse position in container coords\n    let localX = e.clientX - containerRect.left;\n    let localY = e.clientY - containerRect.top;\n\n    // The rendered width/height of the <img> element\n    const renderedWidth = imageEl.width;\n    const renderedHeight = imageEl.height;\n\n    // Natural aspect vs. container aspect\n    const imageAspect = imageEl.naturalWidth / imageEl.naturalHeight;\n    const containerAspect = renderedWidth / renderedHeight;\n\n    // Handle letterboxing if the image is contained\n    if (imageAspect > containerAspect) {\n      // Image is wider than container, so vertical letterboxing\n      const actualHeight = renderedWidth / imageAspect;\n      const verticalPadding = (renderedHeight - actualHeight) / 2;\n      localY -= verticalPadding; // subtract padding\n      // clamp\n      localY = Math.max(0, Math.min(localY, actualHeight));\n    } else {\n      // Image is taller than container, so horizontal letterboxing\n      const actualWidth = renderedHeight * imageAspect;\n      const horizontalPadding = (renderedWidth - actualWidth) / 2;\n      localX -= horizontalPadding;\n      localX = Math.max(0, Math.min(localX, actualWidth));\n    }\n\n    // Convert localX/localY to fraction of displayed image\n    const fractionX = localX / Math.max(1, renderedWidth);\n    const fractionY = localY / Math.max(1, renderedHeight);\n\n    // For a symmetrical 2x zoom (200% × 200%):\n    const bgPosX = fractionX * 400;\n    const bgPosY = fractionY * 400;\n\n    setLenses((prev) => {\n      const updated = [...prev];\n      updated[sectionIndex] = {\n        ...updated[sectionIndex],\n        visible: true,\n        x: e.clientX - containerRect.left,\n        y: e.clientY - containerRect.top,\n        backgroundPosX: bgPosX,\n        backgroundPosY: bgPosY,\n      };\n      return updated;\n    });\n  };\n\n  const handleSectionClick = (sectionIndex, e) => {\n    const rect = e.target.getBoundingClientRect();\n    const image = e.target;\n    \n    // Get the actual rendered size of the image\n    const renderedWidth = image.width;\n    const renderedHeight = image.height;\n    \n    // Calculate the scaling factor between rendered size and natural size\n    const scaleX = image.naturalWidth / renderedWidth;\n    const scaleY = image.naturalHeight / renderedHeight;\n    \n    // Get click position relative to the rendered image\n    // Account for potential padding due to object-fit: contain\n    const imageAspect = image.naturalWidth / image.naturalHeight;\n    const containerAspect = renderedWidth / renderedHeight;\n    \n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n    \n    // Adjust coordinates if image is letterboxed due to object-fit: contain\n    if (imageAspect > containerAspect) {\n      // Image is wider than container - has vertical padding\n      const actualHeight = renderedWidth / imageAspect;\n      const padding = (renderedHeight - actualHeight) / 2;\n      y = y - padding;\n      // Clamp y to actual image bounds\n      y = Math.max(0, Math.min(y, actualHeight));\n    } else {\n      // Image is taller than container - has horizontal padding\n      const actualWidth = renderedHeight * imageAspect;\n      const padding = (renderedWidth - actualWidth) / 2;\n      x = x - padding;\n      // Clamp x to actual image bounds\n      x = Math.max(0, Math.min(x, actualWidth));\n    }\n    \n    // Scale to original image coordinates\n    const originalX = Math.round(x * scaleX);\n    const originalY = Math.round(y * scaleY);\n    \n    // Add the section offset\n    const sectionWidth = imageSize.width / 3;\n    const adjustedX = originalX + (sectionIndex * sectionWidth);\n    \n    // Clamp values to ensure they stay within the section bounds\n    const finalX = Math.max(\n      sectionIndex * sectionWidth,\n      Math.min(adjustedX, (sectionIndex + 1) * sectionWidth - 1)\n    );\n    const finalY = Math.max(0, Math.min(originalY, imageSize.height - 1));\n    \n    const newFocalPoints = [...focalPoints];\n    newFocalPoints[sectionIndex] = { x: finalX, y: finalY };\n    setFocalPoints(newFocalPoints);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // No more \"Confirm Focal Point\" check; we just create the wiggle if all points are set\n    if (focalPoints.some(fp => fp === null)) {\n      setError('Please set a focal point on each section before creating wiggle.');\n      return;\n    }\n\n    setError(null);\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', image);\n      formData.append('focalPoints', JSON.stringify(focalPoints));\n\n      const response = await fetch('http://localhost:5000/api/process_image', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to process image');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'wiggle.mp4';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    // Instead of stepping \"back\" through sections, return to full-image page\n    if (isSplit) {\n      setIsSplit(false);\n    } else if (image) {\n      // If we haven't split yet, go back to upload\n      setImage(null);\n      setFullImagePreview(null);\n      setImagePreviews([]);\n      setFocalPoints([null, null, null]);\n    }\n  };\n\n  function handleRotate90() {\n    if (!loadedImage) return;\n\n    // Create an offscreen canvas to draw the rotated image\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // The rotated image dimensions swap: width -> height, height -> width\n    canvas.width = loadedImage.height;\n    canvas.height = loadedImage.width;\n\n    // Move the origin to the center of the canvas, rotate 90 deg clockwise, then draw\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(Math.PI / 2); \n    // Draw the image so its center is at the canvas origin\n    ctx.drawImage(\n      loadedImage, \n      -loadedImage.width / 2, \n      -loadedImage.height / 2\n    );\n\n    // Convert canvas back to data URL and load it into an <img> so we can update loadedImage\n    const rotatedUrl = canvas.toDataURL('image/jpeg');\n    const rotatedImg = new Image();\n    rotatedImg.onload = () => {\n      // Update states for new (rotated) image\n      setLoadedImage(rotatedImg);\n      setFullImagePreview(rotatedImg.src);\n      // Also update imageSize so that focal points compute correctly\n      setImageSize({ width: rotatedImg.width, height: rotatedImg.height });\n    };\n    rotatedImg.src = rotatedUrl;\n  }\n\n  return (\n    <div className=\"container\">\n      {(image || isSplit) && (\n        <button \n          className=\"back-arrow\" \n          onClick={handleBack}\n          title=\"Go back\"\n        >\n          ←\n        </button>\n      )}\n\n      <h1 className=\"title\">WiggleLens Image Processor</h1>\n      \n      <form onSubmit={handleSubmit} className=\"upload-form\">\n        {!image && (\n          <div className=\"upload-container\">\n            <label className=\"upload-label\">\n              <input \n                type=\"file\" \n                accept=\"image/*\" \n                onChange={handleImageUpload}\n                required \n                className=\"upload-input\"\n              />\n              Upload Image (6000x4000)\n            </label>\n          </div>\n        )}\n\n        {fullImagePreview && !isSplit && (\n          <div className=\"full-image-container\" style={{ display: 'flex', gap: '20px' }}>\n            <img \n              src={fullImagePreview} \n              alt=\"Full uploaded image\" \n              className=\"full-image\"\n            />\n            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n              <button \n                type=\"button\"\n                onClick={handleRotate90}\n                style={{\n                  marginBottom: '10px',\n                  padding: '12px 30px',\n                  backgroundColor: '#f39c12',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '8px',\n                  fontSize: '1.1em',\n                  cursor: 'pointer',\n                  transition: 'background-color 0.3s',\n                }}\n              >\n                Rotate 90 Degrees\n              </button>\n\n              <button \n                type=\"button\" \n                onClick={handleSplitImage}\n                className=\"split-button\"\n                disabled={splitLoading}\n              >\n                {splitLoading ? 'Splitting...' : 'Split Image'}\n              </button>\n            </div>\n      </div>\n        )}\n\n        {isSplit && imagePreviews.length > 0 && (\n          <>\n            <div className=\"sections-container\">\n              {imagePreviews.map((preview, index) => (\n                <div key={index} className=\"section-card\">\n                  <h4 className=\"section-title\">{index + 1}</h4>\n                  <div\n                    className=\"section-image-container\"\n                    onMouseEnter={() => handleLensEnter(index)}\n                    onMouseLeave={() => handleLensLeave(index)}\n                    onMouseMove={(e) => handleLensMove(index, e)}\n                  >\n                    <img\n                      src={preview}\n                      alt={`Section ${index + 1}`}\n                      onClick={(e) => handleSectionClick(index, e)}\n                      className=\"section-image\"\n                    />\n                    {focalPoints[index] && (\n                      <div\n                        className=\"focal-point\"\n                        style={{\n                          left: `${((focalPoints[index].x % (imageSize.width / 3)) / (imageSize.width / 3)) * 100}%`,\n                          top: `${(focalPoints[index].y / imageSize.height) * 100}%`,\n                        }}\n                      />\n                    )}\n\n                    {/* LENS DIV: circular magnifier on top */}\n                    {lenses[index].visible && (\n                      <div\n                        className=\"magnifier-lens\"\n                        style={{\n                          left: lenses[index].x,\n                          top: lenses[index].y,\n                          backgroundImage: `url(${preview})`,\n                          backgroundPosition: `${lenses[index].backgroundPosX}% ${lenses[index].backgroundPosY}%`\n                        }}\n                      />\n                    )}\n      </div>\n\n                  {focalPoints[index] && (\n                    <div className=\"coordinates-text\">\n                      {`Focal point: (${Math.round(focalPoints[index].x - index * (imageSize.width / 3))}, ${Math.round(focalPoints[index].y)})`}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <h3 className=\"previews-title\">Click on each section to set focal points:</h3>\n          </>\n        )}\n\n        {isSplit && (\n          <button \n            type=\"submit\"\n            // Only enable if all 3 focal points are set\n            disabled={\n              loading || focalPoints.some(fp => fp === null)\n            }\n            className=\"submit-button\"\n          >\n            {loading ? 'Processing...' : 'Create Wiggle'}\n          </button>\n        )}\n      </form>\n\n      {error && (\n        <div className=\"error-message\">\n          Error: {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}