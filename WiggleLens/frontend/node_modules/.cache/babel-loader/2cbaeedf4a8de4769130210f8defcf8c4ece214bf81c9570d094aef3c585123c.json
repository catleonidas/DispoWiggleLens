{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leonidas\\\\Desktop\\\\Coding\\\\DispoStudio\\\\WiggleLens\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [fullImagePreview, setFullImagePreview] = useState(null);\n  const [imagePreviews, setImagePreviews] = useState([]);\n  const [imageSize, setImageSize] = useState({\n    width: 0,\n    height: 0\n  });\n  const [focalPoints, setFocalPoints] = useState([null, null, null]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isSplit, setIsSplit] = useState(false);\n  const [currentSection, setCurrentSection] = useState(0);\n  const [loadedImage, setLoadedImage] = useState(null);\n  const [splitLoading, setSplitLoading] = useState(false);\n  const [tempFocalPoint, setTempFocalPoint] = useState(null);\n  const [autoDetectLoading, setAutoDetectLoading] = useState(false);\n  const handleImageUpload = async e => {\n    const file = e.target.files[0];\n\n    // Create temporary image to check dimensions\n    const img = new Image();\n    img.onload = () => {\n      // Check for exact 6000x4000 dimensions\n      if (img.width !== 6000 || img.height !== 4000) {\n        setError('Please upload an image that is exactly 6000x4000 pixels');\n        // Reset file input\n        e.target.value = '';\n        return;\n      }\n\n      // If dimensions are correct, proceed with upload\n      setImage(file);\n      setFocalPoints([null, null, null]);\n      setIsSplit(false);\n      setError(null); // Clear any previous errors\n\n      setImageSize({\n        width: img.width,\n        height: img.height\n      });\n      setFullImagePreview(img.src);\n      setLoadedImage(img);\n    };\n    img.onerror = () => {\n      setError('Failed to load image');\n      e.target.value = '';\n    };\n    img.src = URL.createObjectURL(file);\n  };\n  const handleSplitImage = async () => {\n    setSplitLoading(true);\n    try {\n      const img = loadedImage;\n      const sectionWidth = Math.floor(img.width / 3);\n\n      // Create sections in parallel\n      const sectionPromises = [0, 1, 2].map(async i => {\n        const canvas = new OffscreenCanvas(sectionWidth, img.height);\n        const ctx = canvas.getContext('2d');\n\n        // Draw section\n        ctx.drawImage(img, i * sectionWidth, 0, sectionWidth, img.height, 0, 0, sectionWidth, img.height);\n\n        // Convert to blob and then to data URL\n        const blob = await canvas.convertToBlob({\n          type: 'image/jpeg',\n          quality: 0.8\n        });\n        return URL.createObjectURL(blob);\n      });\n      const previews = await Promise.all(sectionPromises);\n      setImagePreviews(previews);\n      setIsSplit(true);\n    } catch (err) {\n      console.error('Error splitting image:', err);\n      setError('Failed to split image');\n    } finally {\n      setSplitLoading(false);\n    }\n  };\n  const handleSectionClick = (sectionIndex, e) => {\n    if (sectionIndex !== currentSection) return;\n    const rect = e.target.getBoundingClientRect();\n    const image = e.target;\n\n    // Get the actual rendered size of the image\n    const renderedWidth = image.width;\n    const renderedHeight = image.height;\n\n    // Calculate the scaling factor between rendered size and natural size\n    const scaleX = image.naturalWidth / renderedWidth;\n    const scaleY = image.naturalHeight / renderedHeight;\n\n    // Get click position relative to the rendered image\n    // Account for potential padding due to object-fit: contain\n    const imageAspect = image.naturalWidth / image.naturalHeight;\n    const containerAspect = renderedWidth / renderedHeight;\n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n\n    // Adjust coordinates if image is letterboxed due to object-fit: contain\n    if (imageAspect > containerAspect) {\n      // Image is wider than container - has vertical padding\n      const actualHeight = renderedWidth / imageAspect;\n      const padding = (renderedHeight - actualHeight) / 2;\n      y = y - padding;\n      // Clamp y to actual image bounds\n      y = Math.max(0, Math.min(y, actualHeight));\n    } else {\n      // Image is taller than container - has horizontal padding\n      const actualWidth = renderedHeight * imageAspect;\n      const padding = (renderedWidth - actualWidth) / 2;\n      x = x - padding;\n      // Clamp x to actual image bounds\n      x = Math.max(0, Math.min(x, actualWidth));\n    }\n\n    // Scale to original image coordinates\n    const originalX = Math.round(x * scaleX);\n    const originalY = Math.round(y * scaleY);\n\n    // Add the section offset\n    const sectionWidth = imageSize.width / 3;\n    const adjustedX = originalX + sectionIndex * sectionWidth;\n\n    // Clamp values to ensure they stay within the section bounds\n    const finalX = Math.max(sectionIndex * sectionWidth, Math.min(adjustedX, (sectionIndex + 1) * sectionWidth - 1));\n    const finalY = Math.max(0, Math.min(originalY, imageSize.height - 1));\n\n    // Instead of setting focalPoints directly, set temporary point\n    setTempFocalPoint({\n      x: finalX,\n      y: finalY\n    });\n  };\n  const handleConfirmFocalPoint = () => {\n    if (tempFocalPoint && currentSection < 3) {\n      const newFocalPoints = [...focalPoints];\n      newFocalPoints[currentSection] = tempFocalPoint;\n      setFocalPoints(newFocalPoints);\n      setTempFocalPoint(null);\n      setCurrentSection(currentSection + 1);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (currentSection < 3) {\n      handleConfirmFocalPoint();\n      return;\n    }\n\n    // Original submit logic for creating wiggle\n    if (focalPoints.some(fp => fp === null)) {\n      setError('Please set focal points for all sections by clicking on them');\n      return;\n    }\n    setError(null);\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', image);\n      formData.append('focalPoints', JSON.stringify(focalPoints));\n      const response = await fetch('http://localhost:5000/api/process_image', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to process image');\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'wiggle.mp4';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleBack = () => {\n    if (isSplit && currentSection > 0) {\n      // Go back to previous section\n      const newSection = currentSection - 1;\n      setCurrentSection(newSection);\n\n      // Clear the focal point for that section\n      const newFocalPoints = [...focalPoints];\n      newFocalPoints[newSection] = null;\n      setFocalPoints(newFocalPoints);\n    } else if (isSplit) {\n      // If we're at the first section, go back to full image\n      setIsSplit(false);\n      setFocalPoints([null, null, null]);\n      setCurrentSection(0);\n    } else if (image) {\n      // If we're at full image, go back to upload\n      setImage(null);\n      setFullImagePreview(null);\n      setImagePreviews([]);\n      setFocalPoints([null, null, null]);\n      setCurrentSection(0);\n    }\n  };\n  const handleAutoDetect = async () => {\n    setAutoDetectLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', image);\n      formData.append('focalPoint', JSON.stringify(focalPoints[0])); // Send first focal point\n\n      const response = await fetch('http://localhost:5000/api/auto_detect', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to auto-detect points');\n      }\n      const detectedPoints = await response.json();\n      const newFocalPoints = [...focalPoints];\n      newFocalPoints[1] = detectedPoints[0];\n      newFocalPoints[2] = detectedPoints[1];\n      setFocalPoints(newFocalPoints);\n      setCurrentSection(3); // Move to final state\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setAutoDetectLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [(image || isSplit) && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-arrow\",\n      onClick: handleBack,\n      title: \"Go back\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"WiggleLens Image Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [!image &&\n      /*#__PURE__*/\n      // Only show upload container if no image is selected\n      _jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"upload-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageUpload,\n            required: true,\n            className: \"upload-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), \"Upload Image (6000x4000)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), fullImagePreview && !isSplit && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: fullImagePreview,\n          alt: \"Full uploaded image\",\n          className: \"full-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSplitImage,\n          className: \"split-button\",\n          disabled: splitLoading,\n          children: splitLoading ? 'Splitting...' : 'Split Image'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), isSplit && imagePreviews.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sections-container\",\n          children: imagePreviews.map((preview, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `section-card ${index === currentSection ? 'active' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"section-title\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-image-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: preview,\n                alt: `Section ${index + 1}`,\n                onClick: e => handleSectionClick(index, e),\n                className: `section-image ${index === currentSection ? 'active' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 21\n              }, this), (focalPoints[index] || index === currentSection && tempFocalPoint) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"focal-point\",\n                style: {\n                  left: `${(index === currentSection ? tempFocalPoint === null || tempFocalPoint === void 0 ? void 0 : tempFocalPoint.x : focalPoints[index].x) % (imageSize.width / 3) / (imageSize.width / 3) * 100}%`,\n                  top: `${(index === currentSection ? tempFocalPoint === null || tempFocalPoint === void 0 ? void 0 : tempFocalPoint.y : focalPoints[index].y) / imageSize.height * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this), (focalPoints[index] || index === currentSection && tempFocalPoint) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coordinates-text\",\n              children: `Focal point: (${Math.round((index === currentSection ? tempFocalPoint === null || tempFocalPoint === void 0 ? void 0 : tempFocalPoint.x : focalPoints[index].x) - index * (imageSize.width / 3))}, ${Math.round(index === currentSection ? tempFocalPoint === null || tempFocalPoint === void 0 ? void 0 : tempFocalPoint.y : focalPoints[index].y)})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), currentSection > 0 && !focalPoints[1] && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleAutoDetect,\n          disabled: autoDetectLoading,\n          className: \"auto-detect-button\",\n          children: autoDetectLoading ? 'Detecting...' : 'Auto-detect Remaining Points'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"previews-title\",\n          children: \"Click on each section to set focal points:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), isSplit && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !image || loading || currentSection < 3 && !tempFocalPoint,\n        className: \"submit-button\",\n        children: loading ? 'Processing...' : currentSection < 3 ? 'Confirm Focal Point' : 'Create Wiggle'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"q9C69v3VmsGfgnYL3PhD3fDRRLE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","image","setImage","fullImagePreview","setFullImagePreview","imagePreviews","setImagePreviews","imageSize","setImageSize","width","height","focalPoints","setFocalPoints","error","setError","loading","setLoading","isSplit","setIsSplit","currentSection","setCurrentSection","loadedImage","setLoadedImage","splitLoading","setSplitLoading","tempFocalPoint","setTempFocalPoint","autoDetectLoading","setAutoDetectLoading","handleImageUpload","e","file","target","files","img","Image","onload","value","src","onerror","URL","createObjectURL","handleSplitImage","sectionWidth","Math","floor","sectionPromises","map","i","canvas","OffscreenCanvas","ctx","getContext","drawImage","blob","convertToBlob","type","quality","previews","Promise","all","err","console","handleSectionClick","sectionIndex","rect","getBoundingClientRect","renderedWidth","renderedHeight","scaleX","naturalWidth","scaleY","naturalHeight","imageAspect","containerAspect","x","clientX","left","y","clientY","top","actualHeight","padding","max","min","actualWidth","originalX","round","originalY","adjustedX","finalX","finalY","handleConfirmFocalPoint","newFocalPoints","handleSubmit","preventDefault","some","fp","formData","FormData","append","JSON","stringify","response","fetch","method","body","ok","errorData","json","Error","url","window","a","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","message","handleBack","newSection","handleAutoDetect","detectedPoints","className","children","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","onChange","required","alt","disabled","length","preview","index","style","_c","$RefreshReg$"],"sources":["C:/Users/Leonidas/Desktop/Coding/DispoStudio/WiggleLens/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [image, setImage] = useState(null);\r\n  const [fullImagePreview, setFullImagePreview] = useState(null);\r\n  const [imagePreviews, setImagePreviews] = useState([]);\r\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });\r\n  const [focalPoints, setFocalPoints] = useState([null, null, null]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isSplit, setIsSplit] = useState(false);\r\n  const [currentSection, setCurrentSection] = useState(0);\r\n  const [loadedImage, setLoadedImage] = useState(null);\r\n  const [splitLoading, setSplitLoading] = useState(false);\r\n  const [tempFocalPoint, setTempFocalPoint] = useState(null);\r\n  const [autoDetectLoading, setAutoDetectLoading] = useState(false);\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    \r\n    // Create temporary image to check dimensions\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Check for exact 6000x4000 dimensions\r\n      if (img.width !== 6000 || img.height !== 4000) {\r\n        setError('Please upload an image that is exactly 6000x4000 pixels');\r\n        // Reset file input\r\n        e.target.value = '';\r\n        return;\r\n      }\r\n\r\n      // If dimensions are correct, proceed with upload\r\n      setImage(file);\r\n      setFocalPoints([null, null, null]);\r\n      setIsSplit(false);\r\n      setError(null);  // Clear any previous errors\r\n      \r\n      setImageSize({ width: img.width, height: img.height });\r\n      setFullImagePreview(img.src);\r\n      setLoadedImage(img);\r\n    };\r\n\r\n    img.onerror = () => {\r\n      setError('Failed to load image');\r\n      e.target.value = '';\r\n    };\r\n\r\n    img.src = URL.createObjectURL(file);\r\n  };\r\n\r\n  const handleSplitImage = async () => {\r\n    setSplitLoading(true);\r\n    try {\r\n      const img = loadedImage;\r\n      const sectionWidth = Math.floor(img.width / 3);\r\n      \r\n      // Create sections in parallel\r\n      const sectionPromises = [0, 1, 2].map(async (i) => {\r\n        const canvas = new OffscreenCanvas(sectionWidth, img.height);\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // Draw section\r\n        ctx.drawImage(\r\n          img,\r\n          i * sectionWidth, 0, sectionWidth, img.height,\r\n          0, 0, sectionWidth, img.height\r\n        );\r\n        \r\n        // Convert to blob and then to data URL\r\n        const blob = await canvas.convertToBlob({ type: 'image/jpeg', quality: 0.8 });\r\n        return URL.createObjectURL(blob);\r\n      });\r\n      \r\n      const previews = await Promise.all(sectionPromises);\r\n      setImagePreviews(previews);\r\n      setIsSplit(true);\r\n    } catch (err) {\r\n      console.error('Error splitting image:', err);\r\n      setError('Failed to split image');\r\n    } finally {\r\n      setSplitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSectionClick = (sectionIndex, e) => {\r\n    if (sectionIndex !== currentSection) return;\r\n\r\n    const rect = e.target.getBoundingClientRect();\r\n    const image = e.target;\r\n    \r\n    // Get the actual rendered size of the image\r\n    const renderedWidth = image.width;\r\n    const renderedHeight = image.height;\r\n    \r\n    // Calculate the scaling factor between rendered size and natural size\r\n    const scaleX = image.naturalWidth / renderedWidth;\r\n    const scaleY = image.naturalHeight / renderedHeight;\r\n    \r\n    // Get click position relative to the rendered image\r\n    // Account for potential padding due to object-fit: contain\r\n    const imageAspect = image.naturalWidth / image.naturalHeight;\r\n    const containerAspect = renderedWidth / renderedHeight;\r\n    \r\n    let x = e.clientX - rect.left;\r\n    let y = e.clientY - rect.top;\r\n    \r\n    // Adjust coordinates if image is letterboxed due to object-fit: contain\r\n    if (imageAspect > containerAspect) {\r\n      // Image is wider than container - has vertical padding\r\n      const actualHeight = renderedWidth / imageAspect;\r\n      const padding = (renderedHeight - actualHeight) / 2;\r\n      y = y - padding;\r\n      // Clamp y to actual image bounds\r\n      y = Math.max(0, Math.min(y, actualHeight));\r\n    } else {\r\n      // Image is taller than container - has horizontal padding\r\n      const actualWidth = renderedHeight * imageAspect;\r\n      const padding = (renderedWidth - actualWidth) / 2;\r\n      x = x - padding;\r\n      // Clamp x to actual image bounds\r\n      x = Math.max(0, Math.min(x, actualWidth));\r\n    }\r\n    \r\n    // Scale to original image coordinates\r\n    const originalX = Math.round(x * scaleX);\r\n    const originalY = Math.round(y * scaleY);\r\n    \r\n    // Add the section offset\r\n    const sectionWidth = imageSize.width / 3;\r\n    const adjustedX = originalX + (sectionIndex * sectionWidth);\r\n    \r\n    // Clamp values to ensure they stay within the section bounds\r\n    const finalX = Math.max(\r\n      sectionIndex * sectionWidth,\r\n      Math.min(adjustedX, (sectionIndex + 1) * sectionWidth - 1)\r\n    );\r\n    const finalY = Math.max(0, Math.min(originalY, imageSize.height - 1));\r\n    \r\n    // Instead of setting focalPoints directly, set temporary point\r\n    setTempFocalPoint({ x: finalX, y: finalY });\r\n  };\r\n\r\n  const handleConfirmFocalPoint = () => {\r\n    if (tempFocalPoint && currentSection < 3) {\r\n      const newFocalPoints = [...focalPoints];\r\n      newFocalPoints[currentSection] = tempFocalPoint;\r\n      setFocalPoints(newFocalPoints);\r\n      setTempFocalPoint(null);\r\n      setCurrentSection(currentSection + 1);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (currentSection < 3) {\r\n      handleConfirmFocalPoint();\r\n      return;\r\n    }\r\n\r\n    // Original submit logic for creating wiggle\r\n    if (focalPoints.some(fp => fp === null)) {\r\n      setError('Please set focal points for all sections by clicking on them');\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', image);\r\n      formData.append('focalPoints', JSON.stringify(focalPoints));\r\n\r\n      const response = await fetch('http://localhost:5000/api/process_image', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to process image');\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = 'wiggle.mp4';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if (isSplit && currentSection > 0) {\r\n      // Go back to previous section\r\n      const newSection = currentSection - 1;\r\n      setCurrentSection(newSection);\r\n      \r\n      // Clear the focal point for that section\r\n      const newFocalPoints = [...focalPoints];\r\n      newFocalPoints[newSection] = null;\r\n      setFocalPoints(newFocalPoints);\r\n    } else if (isSplit) {\r\n      // If we're at the first section, go back to full image\r\n      setIsSplit(false);\r\n      setFocalPoints([null, null, null]);\r\n      setCurrentSection(0);\r\n    } else if (image) {\r\n      // If we're at full image, go back to upload\r\n      setImage(null);\r\n      setFullImagePreview(null);\r\n      setImagePreviews([]);\r\n      setFocalPoints([null, null, null]);\r\n      setCurrentSection(0);\r\n    }\r\n  };\r\n\r\n  const handleAutoDetect = async () => {\r\n    setAutoDetectLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', image);\r\n      formData.append('focalPoint', JSON.stringify(focalPoints[0])); // Send first focal point\r\n\r\n      const response = await fetch('http://localhost:5000/api/auto_detect', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to auto-detect points');\r\n      }\r\n\r\n      const detectedPoints = await response.json();\r\n      const newFocalPoints = [...focalPoints];\r\n      newFocalPoints[1] = detectedPoints[0];\r\n      newFocalPoints[2] = detectedPoints[1];\r\n      setFocalPoints(newFocalPoints);\r\n      setCurrentSection(3); // Move to final state\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setAutoDetectLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {(image || isSplit) && (\r\n        <button \r\n          className=\"back-arrow\" \r\n          onClick={handleBack}\r\n          title=\"Go back\"\r\n        >\r\n          ←\r\n        </button>\r\n      )}\r\n\r\n      <h1 className=\"title\">WiggleLens Image Processor</h1>\r\n      \r\n      <form onSubmit={handleSubmit} className=\"upload-form\">\r\n        {!image && (  // Only show upload container if no image is selected\r\n          <div className=\"upload-container\">\r\n            <label className=\"upload-label\">\r\n              <input \r\n                type=\"file\" \r\n                accept=\"image/*\" \r\n                onChange={handleImageUpload}\r\n                required \r\n                className=\"upload-input\"\r\n              />\r\n              Upload Image (6000x4000)\r\n            </label>\r\n          </div>\r\n        )}\r\n\r\n        {fullImagePreview && !isSplit && (\r\n          <div className=\"full-image-container\">\r\n            <img \r\n              src={fullImagePreview} \r\n              alt=\"Full uploaded image\" \r\n              className=\"full-image\"\r\n            />\r\n            <button \r\n              type=\"button\" \r\n              onClick={handleSplitImage}\r\n              className=\"split-button\"\r\n              disabled={splitLoading}\r\n            >\r\n              {splitLoading ? 'Splitting...' : 'Split Image'}\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {isSplit && imagePreviews.length > 0 && (\r\n          <>\r\n            <div className=\"sections-container\">\r\n              {imagePreviews.map((preview, index) => (\r\n                <div key={index} className={`section-card ${index === currentSection ? 'active' : ''}`}>\r\n                  <h4 className=\"section-title\">{index + 1}</h4>\r\n                  <div className=\"section-image-container\">\r\n                    <img \r\n                      src={preview} \r\n                      alt={`Section ${index + 1}`} \r\n                      onClick={(e) => handleSectionClick(index, e)}\r\n                      className={`section-image ${index === currentSection ? 'active' : ''}`}\r\n                    />\r\n                    {(focalPoints[index] || (index === currentSection && tempFocalPoint)) && (\r\n                      <div \r\n                        className=\"focal-point\"\r\n                        style={{\r\n                          left: `${(((index === currentSection ? tempFocalPoint?.x : focalPoints[index].x) % (imageSize.width / 3)) / (imageSize.width / 3)) * 100}%`,\r\n                          top: `${((index === currentSection ? tempFocalPoint?.y : focalPoints[index].y) / imageSize.height) * 100}%`,\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                  {(focalPoints[index] || (index === currentSection && tempFocalPoint)) && (\r\n                    <div className=\"coordinates-text\">\r\n                      {`Focal point: (${Math.round((index === currentSection ? tempFocalPoint?.x : focalPoints[index].x) - (index * (imageSize.width / 3)))}, ${Math.round(index === currentSection ? tempFocalPoint?.y : focalPoints[index].y)})`}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            {currentSection > 0 && !focalPoints[1] && (\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleAutoDetect}\r\n                disabled={autoDetectLoading}\r\n                className=\"auto-detect-button\"\r\n              >\r\n                {autoDetectLoading ? 'Detecting...' : 'Auto-detect Remaining Points'}\r\n              </button>\r\n            )}\r\n            <h3 className=\"previews-title\">Click on each section to set focal points:</h3>\r\n          </>\r\n        )}\r\n\r\n        {isSplit && (\r\n          <button \r\n            type=\"submit\" \r\n            disabled={!image || loading || (currentSection < 3 && !tempFocalPoint)}\r\n            className=\"submit-button\"\r\n          >\r\n            {loading ? 'Processing...' : currentSection < 3 ? 'Confirm Focal Point' : 'Create Wiggle'}\r\n          </button>\r\n        )}\r\n      </form>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          Error: {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}